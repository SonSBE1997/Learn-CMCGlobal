package com.cmcglobal.repository;

import java.util.List;

import org.springframework.data.domain.Sort;
import org.springframework.data.jpa.repository.JpaRepository;
import org.springframework.data.jpa.repository.Query;
import org.springframework.data.repository.query.Param;

import com.cmcglobal.custorm.FilterCustorm;
import com.cmcglobal.entity.Exam;
<<<<<<< HEAD

/*
 * @author ntmduyen.
 * Created date: Feb 22, 2019
 * Created time: 1:58:30 PM
 * Description: TODO - exam repository.
 */
=======
import com.cmcglobal.utils.Contants;
>>>>>>> 0d2e783c07a4b7d93b60e7999d59d0c3ca3ba27c
public interface ExamRepository
    extends JpaRepository<Exam, String>, FilterCustorm {
  /**
   * Author: ntmduyen
   * Created date: Feb 17, 2019
   * Created time: 12:51:03 AM
<<<<<<< HEAD
   * Description: TODO - select exam by page.
   * @param pageable
   * @return
   */
  @Query("Select e FROM Exam e, User u, Category c WHERE e.userCreated = u and e.category = c and "
      + "(e.title like %:searchInput% " + "OR u.fullName like %:searchInput% "
      + "OR c.categoryName like %:searchInput% "
      + "OR e.duration like %:searchInput% "
      + "OR e.numberOfQuestion like %:searchInput% "
      + "OR e.status like %:searchInput%) " + "GROUP BY e.examId")

  List<Exam> pageExam(@Param("searchInput") String searchContent,
      Sort pageable);
=======
   * Description: TODO - show the page of exam.
   * @param pageable
   * @return
   */
  @Query(Contants.Exam.QUERY_PAGE_ALL)
  
  List<Exam> pageExam(@Param("searchInput") String searchContent, Sort pageable);
>>>>>>> 0d2e783c07a4b7d93b60e7999d59d0c3ca3ba27c

  /**
   * Author: ntmduyen
   * Created date: Feb 17, 2019
   * Created time: 12:51:10 AM
<<<<<<< HEAD
   * Description: TODO - select exam sort by created user ascending.
   * @param pageable
   * @return
   */
  @Query("Select e FROM Exam e, User u, Category c "
      + "WHERE e.userCreated = u and e.category = c and "
      + "(e.title like %:searchInput% " + "OR u.fullName like %:searchInput% "
      + "OR c.categoryName like %:searchInput% "
      + "OR e.duration like %:searchInput% "
      + "OR e.numberOfQuestion like %:searchInput% "
      + "OR e.status like %:searchInput%) "
      + "GROUP BY e.examId ORDER BY u.fullName asc")
  List<Exam> pageExamSortByUserCreatedByAsc(
      @Param("searchInput") String searchContent);
=======
   * Description: TODO - show the page of exam.
   * @param pageable
   * @return
   */
  @Query(Contants.Exam.QUERY_PAGE_ALL_SORT_BY_USER_CREATED_ASC)
  List<Exam> pageExamSortByUserCreatedByAsc(@Param("searchInput") String searchContent);
>>>>>>> 0d2e783c07a4b7d93b60e7999d59d0c3ca3ba27c

  /**
   * Author: ntmduyen
   * Created date: Feb 17, 2019
   * Created time: 12:51:17 AM
<<<<<<< HEAD
   * Description: TODO - select list exam sort by created user descending.
   * @param pageable
   * @return
   */
  @Query("Select e FROM Exam e, User u, Category c "
      + "WHERE e.userCreated = u and e.category = c and "
      + "(e.title like %:searchInput% " + "OR u.fullName like %:searchInput% "
      + "OR c.categoryName like %:searchInput% "
      + "OR e.duration like %:searchInput% "
      + "OR e.numberOfQuestion like %:searchInput% "
      + "OR e.status like %:searchInput%) " + "GROUP BY e.examId "
      + "ORDER BY u.fullName desc")
  List<Exam> pageExamSortByUserCreatedByDesc(
      @Param("searchInput") String searchContent);

  /**
   * Author: ntmduyen
   * Created date: Feb 17, 2019
   * Created time: 12:51:10 AM
   * Description: TODO - select list exam sort by category ascending.
   * @param pageable
   * @return
   */
  @Query("Select e FROM Exam e, User u, Category c "
      + "WHERE e.userCreated = u and e.category = c and "
      + "(e.title like %:searchInput% " + "OR u.fullName like %:searchInput% "
      + "OR c.categoryName like %:searchInput% "
      + "OR e.duration like %:searchInput% "
      + "OR e.numberOfQuestion like %:searchInput% "
      + "OR e.status like %:searchInput%) " + "GROUP BY e.examId "
      + "ORDER BY c.categoryName asc")
  List<Exam> pageExamSortByCategoryAsc(
      @Param("searchInput") String searchContent);

  /**
   * Author: ntmduyen
   * Created date: Feb 17, 2019
   * Created time: 12:51:10 AM
   * Description: TODO - select list exam sort by category descending.
   * @param pageable
   * @return
   */
  @Query("Select e FROM Exam e, User u, Category c "
      + "WHERE e.userCreated = u and e.category = c and "
      + "(e.title like %:searchInput% " + "OR u.fullName like %:searchInput% "
      + "OR c.categoryName like %:searchInput% "
      + "OR e.duration like %:searchInput% "
      + "OR e.numberOfQuestion like %:searchInput% "
      + "OR e.status like %:searchInput%) " + "GROUP BY e.examId "
      + "ORDER BY c.categoryName desc")
  List<Exam> pageExamSortByCategoryDesc(
      @Param("searchInput") String searchContent);
=======
   * Description: TODO - show the page of exam.
   * @param pageable
   * @return
   */
  @Query(Contants.Exam.QUERY_PAGE_ALL_SORT_BY_USER_CREATED_DESC)
  List<Exam> pageExamSortByUserCreatedByDesc(@Param("searchInput") String searchContent);
  
  /**
   * Author: ntmduyen.
   * Created date: Feb 22, 2019
   * Created time: 1:53:51 PM
   * Description: TODO - show the page of exam.
   * @param searchContent
   * @return
   */
  @Query(Contants.Exam.QUERY_PAGE_ALL_SORT_BY_CATEGORY_NAME_ASC)
  List<Exam> pageExamSortByCategoryAsc(@Param("searchInput") String searchContent);
  
  /**
   * Author: ntmduyen.
   * Created date: Feb 22, 2019
   * Created time: 1:53:58 PM
   * Description: TODO - .
   * @param searchContenshow the page of examt
   * @return
   */
  @Query(Contants.Exam.QUERY_PAGE_ALL_SORT_BY_CATEGORY_NAME_DESC)
  List<Exam> pageExamSortByCategoryDesc(@Param("searchInput") String searchContent);
>>>>>>> 0d2e783c07a4b7d93b60e7999d59d0c3ca3ba27c
}
